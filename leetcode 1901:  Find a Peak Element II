class Solution {
private:
    int max_row(vector<vector<int>>& mat , int row, int col , int mid){
        int maxi = -1;
        int index = -1;
        for (int i = 0; i < row; i++){
            if (mat[i][mid] > maxi){
                maxi = mat[i][mid];
                index = i;
            }
        }
        return index;
    }
public:
    vector<int> findPeakGrid(vector<vector<int>>& mat) {
        int row = mat.size();
        int col = mat[0].size();
        int i = 0; 
        int j = col - 1;

        while (i <= j){
            int mid = i + (j - i) / 2;
            int maximum = max_row(mat, row, col, mid);
            int left_element = (mid - 1 >= 0) ? mat[maximum][mid - 1] : -1;
            int right_element = (mid + 1 < col) ? mat[maximum][mid + 1] : -1;

            if (mat[maximum][mid] > left_element && mat[maximum][mid] > right_element){
                return {maximum, mid};
            }
            else if (mat[maximum][mid] < left_element){
                j = mid - 1;
            }
            else{
                i = mid + 1;
            }
        }

        return {-1, -1};
    }
};
